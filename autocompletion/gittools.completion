__DEFAULT() {
  local cur prev opts
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  opts=${1:-"--help --repository --branch"}

  if [[ ${cur} == -* ]] ; then
    OPTIONS=()
    for OPT in ${opts[@]}; do
      [[ "$OPT" == "--help" && ${#COMP_WORDS[@]} -gt 2 ]] && continue 

      if [[ " ${COMP_WORDS[@]} " != *" $OPT "* ]]; then
        OPTIONS+=("$OPT")
      fi
    done
    COMPREPLY=( $(compgen -W "$(echo ${OPTIONS[@]})" -- ${cur}) )
    return 0
  fi

  if [[ ${prev} == "--repository" || ${prev} == "-r" || ${cur} == "--repository=*" ]]; then
      list_directories    
      return 0
  fi  
}

_gcheckout() 
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts=("--help" "--repository" "--branch" "--pre-fetch" "--post-pull" "--prune-remote")

    if [[ ${cur} == -* ]] ; then
      OPTIONS=()
      for OPT in ${opts[@]}; do
        [[ "$OPT" == "--help" && ${#COMP_WORDS[@]} -gt 2 ]] && continue 

        if [[ " ${COMP_WORDS[@]} " != *" $OPT "* ]]; then
          OPTIONS+=("$OPT")
        fi
      done
      COMPREPLY=( $(compgen -W "$(echo ${OPTIONS[@]})" -- ${cur}) )
      return 0
    fi

    if [[ ${prev} == "--repository" || ${prev} == "-r" || ${cur} == "--repository=*" || ${cur} == "-r=*" ]]; then
      list_directories
      return 0
    fi
    if [[ ! -z "$(echo "${COMP_WORDS[@]}" | grep -Po '(?<=repository).*')" ]] || [[ ! -z "$(echo "${COMP_WORDS[@]}" | grep -o '\-r=\?')" ]]; then 

      ARGS=($(echo "${COMP_WORDS[@]}" | grep -Po '(?<=repository).*' || echo "${COMP_WORDS[@]}" | grep -Po '(?<= -r).*'))
      [[ ${#ARGS[@]} -gt 1 &&  "${ARGS[0]}" == "=" ]] && ARGS=("${ARGS[@]:1:1}")

      if [[ ${#ARGS[@]} -gt 0 && -d "${ARGS[0]}" && "$(cd "${ARGS[0]}" && [[ -d ".git" ]] && echo 1)" == "1" ]]; then 
        COMPREPLY=( $(compgen -W "$(cd "$(pwd)/${ARGS[0]}" && list_branches)" -- ${cur}) )
        return 0
      fi

      if [[ -f "${ARGS[0]}" ]]; then
        COMPREPLY=( $(compgen -W "$(get_repos $(pwd)/${ARGS[0]})" -- ${cur}) )
        return 0
      fi

      return 0
    fi
    
    if [[ ${prev} == "gcheckout" ]] || [[ " ${COMP_WORDS[@]} " != " --repository"* && ${prev} == "--branch" || ${cur} == "--branch=*" ]]; then
      COMPREPLY=( $(compgen -W "$(get_repos)" -- ${cur//"--branch="}) )
      return 0
    fi
}

_gdefault() {
    __DEFAULT "--help --repository --branch"
}

_greset() {
    __DEFAULT "--help --repository --branch --stash"
}

_gpull() {
    __DEFAULT "--help --repository --branch --preserve-merges --rebase"
}

function list_directories {
    k=0
    for WORD in $( compgen -f "${cur//--repository=}" ); do # loop trough the possible completions
        [[ -d "$WORD" ]] && WORD="${WORD}/" || j="${WORD} " # if its a dir add a shlash, else a space
        COMPREPLY[k++]=${WORD} # remove the directory prefix from the array
    done
}

function list_branches {
  git branch --list --all --no-column | sed -e 's/[\* ]//g;s/remotes\/origin\///g;s/HEAD->//g' | sort | uniq | xargs echo
}

function get_repos {
  REPOFILE=$GITTOOLS/.reporc

  if [[ -f "$1" ]]; then
    REPOFILE="$1"
  fi

  BASEDIR=$(cd $(dirname "$REPOFILE") && pwd)
  AUTOCOMPLETE=()
  if [[ -f  "$REPOFILE" ]]; then
    while IFS='' read -r repo || [[ -n "$repo" ]]; do
      REPODIR="$(cd "$BASEDIR" && cd $repo && pwd)"
      if [[ -d "$REPODIR/.git" ]]; then
        BRANCHES=( $(cd "$REPODIR" && list_branches) )
        AUTOCOMPLETE=( $(echo ${AUTOCOMPLETE[@]}) $(echo ${BRANCHES[@]}) )
      fi
    done < "$REPOFILE"

    echo $( echo ${AUTOCOMPLETE[@]} | sort | uniq )
  fi
  return 0
} 

complete -o nospace -F _gcheckout gcheckout
complete -o nospace -F _gdefault gclean-branches
complete -o nospace -F _gdefault gdiff
complete -o nospace -F _gdefault gfetch
complete -o nospace -F _gdefault ginfo
complete -o nospace -F _gdefault gprune
complete -o nospace -F _gpull gpull
complete -o nospace -F _greset greset
complete -o nospace -F _gdefault gstatus